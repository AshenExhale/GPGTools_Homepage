<?xml version="1.0"?>
<project name="Boilerplate Build" default="build" basedir="../"> <!-- one back since we're in build/ -->
	<!-- load property files -->
	
	<property file="build/build.properties"/>
	<property file="build/default.properties"/>
	
	
	<!-- there are three different options for html optimization:
	 buildkit             : all html whitespace retained. inline script/style minified 
	 htmlclean (default)  : minor html optimizations (extra quotes removed). inline script/style minified 
	 htmlcompress         : html minification
	 -->
	
	<target name="basics"     depends="clean,copy,js.all,css" description="Runs YUI Compressor on them and makes magic happen."/>
	
	<target name="text"     depends="basics,htmlclean"                        description="Runs YUI Compressor and makes magic happen."/>
	<target name="buildkit" depends="basics,htmlbuildkit,imagespng,imagesjpg" description="Runs YUI Compressor, optimizes images."/>
	<target name="build"    depends="basics,htmlclean,imagespng,imagesjpg"    description="Runs YUI Compressor, optimizes images."/>
	<target name="minify"   depends="basics,htmlcompress,imagespng,imagesjpg" description="Runs YUI Compressor, optimizes images."/>
	<target name="minitext" depends="basics,htmlcompress"                     description="Minify all text files."/>
	
	
	
	<!-- Wipe the old -->
	<target name="clean">
		<echo message="Cleaning up previous build directory..."/>
		<delete dir="./${dir.publish}/"/>
	</target>
	
	
	<!-- Copy in the new stuff -->
	<target name="copy" depends="clean">
		<echo message="Copying over new files..."/>
		<copy todir="./${dir.publish}">
			<fileset dir="./">
				<exclude name=".gitignore"/>
				<exclude name=".project"/>
				<exclude name=".settings"/>
				<exclude name="README.markdown"/>
				<exclude name="*.php"/>
				<exclude name="*.php.conf"/>
				<exclude name="**/*.php"/>
				<exclude name="templates/"/>
				<exclude name="templates_c/"/>
				<exclude name="libs/"/>
				<exclude name="**/.git/**"/>
				<exclude name="**/.svn/**"/>
				<exclude name=".gitignore"/>
				<exclude name="**/${dir.build}/**"/>
				<exclude name="**/${dir.test}/**"/>
				<exclude name="**/${dir.demo}/**"/>
				<exclude name="**/${dir.js}/profiling/**"/>
				
				<!-- configurable excludes -->
				<exclude name="**/${file.exclude}/**"/>
			</fileset>
		</copy>
	</target> 
	
	
	
	
  	<!-- Optimize javascript files 
	 -->
	<target name="js.all" depends="js.remove.console, js.all.min"></target>
	
	
	<!-- Comment out console.log commands from main scripts -->
	<target name="js.remove.console" description="Comment out console.log lines">
		<echo>Commenting out console.log lines</echo>
		
		<replaceregexp match="(console.log\(.*\))" replace="/\*\1\*/" flags="g" >
			<fileset dir="./${dir.publish}/${dir.js}/">
				<include name="**/*.js"/>
				<exclude name="**/*.min.js"/>
				<exclude name="**/libs/*.js"/>
			</fileset>
		</replaceregexp>  
		
	</target>	
	
	
	
	<!--
	 JS: Minify primary scripts and libraries
	 
	 -->
	<target name="js.all.min" depends="copy">
		<echo message="Minifying script- and library-files"/>
		<apply executable="java" parallel="false" force="true">
			<fileset dir="./${dir.publish}/${dir.js}">
				<include name="**/*.js"/>
				<exclude name="**/*.min.js"/>
				<exclude name="**${dir.js.libs}/*.js"/>
			</fileset>
			<arg line="-jar"/>
			<arg path="./${dir.tools}/${tool.yuicompressor}"/>
			<srcfile/>
			<arg line="--line-break"/>
			<arg line="4000"/>
			<arg line="-o"/>
			<mapper type="glob" from="*.js" to="../${dir.publish}/${dir.js}/*.js"/>
			<targetfile/>
		</apply>
	</target>
		
	
	<!--
	 CSS: run it through yui compressor for minification.
	 -->
	<target name="css" depends="copy">
		<echo message="Minifying css..."/>
		<apply executable="java" parallel="false" force="true">
			<fileset dir="./${dir.publish}/${dir.css}/" includes="*.css"/>
			<arg line="-jar"/>
			<arg path="./${dir.tools}/${tool.yuicompressor}"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.css" to="../${dir.publish}/${dir.css}/*.css"/>
			<targetfile/>
		</apply>
	</target>
	
	
	<!--
	 IMAGES: png
	 -->
	<target name="imagespng" depends="copy">
		<echo message="Optimizing images"/>
		<apply executable="optipng" osfamily="unix">
			<arg value="-o7"/>
			<fileset dir="./${dir.publish}/">
				<include name="**/*.png"/>
			</fileset>
		</apply>
		<apply executable="optipng" osfamily="mac">
			<arg value="-o7"/>
			<fileset dir="./${dir.publish}/">
				<include name="**/*.png"/>
			</fileset>
		</apply>
		<apply executable="tools/optipng-0.6.4-exe/optipng.exe" osfamily="windows">
			<arg value="-o7"/>
			<fileset dir="./${dir.publish}/">
				<include name="**/*.png"/>
			</fileset>
		</apply>
	</target>
	
	<!--
	 IMAGES: jpg
	 -->  
	<target name="imagesjpg" depends="copy">
		<echo message="Clean up those jpgs..."/>
		<apply executable="jpegtran" osfamily="unix">
			<fileset dir="./${dir.publish}/${dir.images}/" includes="*.jpg"/>
			<arg value="-copy"/>
			<!-- change 'all to 'none' in order to strip metadata 
			 only do so if you own copyright to the image -->
			<arg value="all"/>
			<srcfile/>
			<targetfile/>
			<!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
			<mapper type="glob" from="*.jpg" to="../${dir.publish}/${dir.images}/*.jpg"/>
		</apply>
		<apply executable="jpegtran" osfamily="mac">
			<fileset dir="./${dir.publish}/${dir.images}/" includes="*.jpg"/>
			<arg value="-copy"/>
			<!-- change 'all to 'none' in order to strip metadata 
			 only do so if you own copyright to the image -->
			<arg value="all"/>
			<srcfile/>
			<targetfile/>
			<!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
			<mapper type="glob" from="*.jpg" to="../${dir.publish}/${dir.images}/*.jpg"/>
		</apply>
		<apply executable="tools/jpegtran.exe" osfamily="windows">
			<fileset dir="./${dir.publish}/${dir.images}/" includes="*.jpg"/>
			<arg value="-copy"/>
			<!-- change 'all to 'none' in order to strip metadata 
			 only do so if you own copyright to the image -->
			<arg value="all"/>
			<srcfile/>
			<targetfile/>
			<!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
			<mapper type="glob" from="*.jpg" to="../${dir.publish}/${dir.images}/*.jpg"/>
		</apply>
	</target>
	
	
	
	
	
	<!--
	 HTML Minification. There are three levels. htmlclean is default.
	 -->
	<target name="htmlbuildkit" depends="copy" >
		<apply executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/">
				<include name="*.html"/>
				<include name="**/*.html"/>
			</fileset>    	
			<arg value="-jar"/>
			<arg path="./${dir.build}/tools/htmlcompressor-0.9.3.jar"/>
			<arg value="--preserve-comments"/>
			<arg line="--preserve-multi-spaces"/>
			<arg line="--type html"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="../${dir.publish}/*.html"/>    
			<targetfile/>
		</apply>
	</target>
    
	<target name="htmlclean" depends="copy" >
		<apply executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/">
				<include name="*.html"/>
				<include name="**/*.html"/>
			</fileset>    	
			<arg value="-jar"/>
			<arg path="./${dir.build}/tools/htmlcompressor-0.9.3.jar"/>
			<arg line="--type html"/>
			<arg line="--preserve-multi-spaces"/>
			<arg line="--remove-quotes"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="../${dir.publish}/*.html"/>    
			<targetfile/>
		</apply>
	</target>
	
	<target name="htmlcompress" depends="copy" >
		<apply executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/">
				<include name="*.html"/>
				<include name="**/*.html"/>
			</fileset>    	
			<arg value="-jar"/>
			<arg path="./${dir.build}/tools/htmlcompressor-0.9.3.jar"/>
			<arg line="--type html"/>
			<arg line="--remove-quotes"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="../${dir.publish}/*.html"/>    
			<targetfile/>
		</apply>
	</target>
	
	
	
</project>
